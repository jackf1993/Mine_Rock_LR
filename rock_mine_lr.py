# -*- coding: utf-8 -*-
"""rock_mine_LR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rn9yhZeKULnpr0y6xqIHIq_l29wIpcLL

Import Libraries
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Data Processing"""

# Loading Dataset to a panda Dataframe
sonar_data = pd.read_csv("/content/sonar data.csv", header = None)
sonar_data.head()

#number of rows and columns
sonar_data.shape

sonar_data.describe()

sonar_data[60].value_counts()

"""M --> mine

R --> Rock
"""

sonar_data.groupby(60).mean()

#seperate data and labels

X = sonar_data.drop(columns =60, axis =1)
y = sonar_data[60]

X_train, X_test, y_train,y_test = train_test_split(X, y, test_size = 0.1, stratify = y, random_state =1)

model = LogisticRegression()

model.fit(X_train, y_train)

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, y_train)

print("Accuracy Score on training Data: ", training_data_accuracy)

X_test_prediction2 = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction2, y_test)

print("Accuracy Score on Test Data: ", test_data_accuracy)

"""Making a Predictive System"""

input_data = (0.0163,0.0198,0.0202,0.0386,0.0752,0.1444,0.1487,0.1484,0.2442,0.2822,0.3691,0.3750,0.3927,0.3308,0.1085,0.1139,0.3446,0.5441,0.6470,0.7276,0.7894,0.8264,0.8697,0.7836,0.7140,0.5698,0.2908,0.4636,0.6409,0.7405,0.8069,0.8420,1.0000,0.9536,0.6755,0.3905,0.1249,0.3629,0.6356,0.8116,0.7664,0.5417,0.2614,0.1723,0.2814,0.2764,0.1985,0.1502,0.1219,0.0493,0.0027,0.0077,0.0026,0.0031,0.0083,0.0020,0.0084,0.0108,0.0083,0.0033)

#changing the input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape numpy array as the predicting for one instance
input_data_reshape = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshape)

if(prediction[0] == 'R'):
    print("It is a Rock")
else:
    print("it is a Mine")

